(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{324:function(n,r,e){"use strict";var t=e(116),o=e(305),l=e(306),c=function(){function n(r){Object(o.a)(this,n),this.algorithm=r,this.context=null,this.epoch=null,this.alldone=!1,this.lastvalue=null}return Object(l.a)(n,[{key:"init",value:function(){this.context=this.algorithm.getInitContext(),this.epoch=this.algorithm.epoch(this.context),this.alldone=!1}},{key:"isAllDone",value:function(){return this.alldone}},{key:"getContext",value:function(){return this.context}},{key:"getCurResult",value:function(){return this.algorithm.getCurResult(this.context)}},{key:"next",value:function(){var n=this.epoch.next(),r=n.value;if(n.done){var e=Object(t.a)(r,2),o=e[0],l=e[1];return o?(this.alldone=!0,this.lastvalue):(this.context=l,this.epoch=this.algorithm.epoch(l),this.next())}return this.lastvalue=r,r}},{key:"skip",value:function(){for(;;){var n=this.epoch.next(),r=n.value;if(n.done){var e=Object(t.a)(r,2),o=e[0],l=e[1];return o?(this.alldone=!0,this.lastvalue):(this.context=l,this.epoch=this.algorithm.epoch(l),this.lastvalue)}this.lastvalue=r}}}]),n}();r.a=c},332:function(n,r,e){"use strict";e(76),e(74),e(75),e(50),e(313);var t=e(305),o=e(306),l=e(112),c=e(308),d=e.n(c),x=e(312),h=function(){function n(r){Object(t.a)(this,n),Object(l.a)(this,"allFirstSet",Array.of()),Object(l.a)(this,"allDone",!0),Object(l.a)(this,"turn",1),this.grammar=r.clone();var e=this.grammar.getTerminals();d()(e.length,"当前文法没有终止符号");var o=this.grammar.getNonterminals();d()(o.length,"当前文法没有非终止符号");var c=!0,x=!1,h=void 0;try{for(var m,y=e[Symbol.iterator]();!(c=(m=y.next()).done);c=!0){var i=m.value,S=Array.of(),F=Array.of();S.push(i),S.push(!1),S.push(F),S.push(F.length),this.allFirstSet.push(S)}}catch(n){x=!0,h=n}finally{try{c||null==y.return||y.return()}finally{if(x)throw h}}var f=!0,v=!1,k=void 0;try{for(var I,E=o[Symbol.iterator]();!(f=(I=E.next()).done);f=!0){var w=I.value,O=Array.of(),T=Array.of();O.push(w),O.push(!1),O.push(T),O.push(T.length),this.allFirstSet.push(O)}}catch(n){v=!0,k=n}finally{try{f||null==E.return||E.return()}finally{if(v)throw k}}}return Object(o.a)(n,[{key:"getInitContext",value:function(){return{symbolIndex:0,firstSet:new x.a}}},{key:"getIndex",value:function(n){for(var i=0;i<this.allFirstSet.length;i++)if(n.getString()===this.allFirstSet[i][0].getString())return i;return-100}},{key:"firstSetHasEmpty",value:function(n){var r=!1,e=!0,t=!1,o=void 0;try{for(var l,c=n[Symbol.iterator]();!(e=(l=c.next()).done);e=!0){if(l.value.isEmpty()){r=!0;break}}}catch(n){t=!0,o=n}finally{try{e||null==c.return||c.return()}finally{if(t)throw o}}return r}},{key:"firstSetHasTheSymbol",value:function(n,symbol){var r=!1,e=!0,t=!1,o=void 0;try{for(var l,c=n[Symbol.iterator]();!(e=(l=c.next()).done);e=!0){if(l.value.getString()===symbol.getString()){r=!0;break}}}catch(n){t=!0,o=n}finally{try{e||null==c.return||c.return()}finally{if(t)throw o}}return r}},{key:"epoch",value:regeneratorRuntime.mark(function n(r){var e,t,o,l,c,x,h,m,symbol,y,S,F,f,v,i,k,I,E,w,O,T,j,body,C,H,A,D,P,R,J,B,N,z,G,K,L,M,Q,U,V,W,X,Y,Z,$,_,nn,rn,en,tn,an,sn,on,ln,pn;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:this.allDone=!0,e=!0,t=!1,o=void 0,n.prev=4,l=this.allFirstSet[Symbol.iterator]();case 6:if(e=(c=l.next()).done){n.next=14;break}if(c.value[1]){n.next=11;break}return this.allDone=!1,n.abrupt("break",14);case 11:e=!0,n.next=6;break;case 14:n.next=20;break;case 16:n.prev=16,n.t0=n.catch(4),t=!0,o=n.t0;case 20:n.prev=20,n.prev=21,e||null==l.return||l.return();case 23:if(n.prev=23,!t){n.next=26;break}throw o;case 26:return n.finish(23);case 27:return n.finish(20);case 28:if(!this.allDone){n.next=30;break}return n.abrupt("return",[!0,r]);case 30:if(x=r.symbolIndex,h=r.firstSet,m={symbolIndex:0,firstSet:h},!(symbol=this.allFirstSet[x][0]).isTerminal()){n.next=67;break}if(this.firstSetHasTheSymbol(this.allFirstSet[x][2],symbol)){n.next=40;break}return this.allFirstSet[x][2].push(symbol),this.allFirstSet[x][1]=!0,h.add(symbol,symbol),n.next=40,{isTerminal:!0,allFirstSet:this.allFirstSet,symbolIndex:x,symbol:symbol,production:null,productionIndex:null,dependSymbolIndex:null,newlyIncreasedSymbol:symbol,turn:this.turn,algorithmStep:1,notice:'\n          <h3>\n            当前计算\n            <span \n            style="color: #409EFF;\n            background-color: rgba(64,158,255,.1);\n            border-radius: 4px;\n            margin: 2px; \n            padding:1px 3px 3px 10px;\n            border: 1px solid rgba(64,158,255,.2);"\n            >\n              First( '.concat(symbol.getString(),' )\n            </span><br><br>\n            符号\n            <span \n            style="color: #409EFF;\n            background-color: rgba(64,158,255,.1);\n            margin-right: 6px;\n            padding:0px 1px 0px 8px;\n            border-radius: 4px;\n            border: 1px solid rgba(64,158,255,.2);"\n            >\n              ').concat(symbol.getString(),'\n            </span>是终止符号<br><br>\n            <span \n            style="color: #409EFF;\n            background-color: rgba(64,158,255,.1);\n            margin: 2px;\n            padding:2px 2px 2px 2px;\n            border-radius: 4px;\n            border: 1px solid rgba(64,158,255,.2);"\n            >\n              First( ').concat(symbol.getString()," )={ ").concat(symbol.getString()," }\n            </span>\n          </h3>")};case 40:if(x!==this.allFirstSet.length-1){n.next=64;break}for(y=!0,S=!1,F=void 0,n.prev=44,f=this.allFirstSet[Symbol.iterator]();!(y=(v=f.next()).done);y=!0)(i=v.value)[2].length===i[3]?(i[1]=!0,i[3]=i[2].length):(i[1]=!1,i[3]=i[2].length);n.next=52;break;case 48:n.prev=48,n.t1=n.catch(44),S=!0,F=n.t1;case 52:n.prev=52,n.prev=53,y||null==f.return||f.return();case 55:if(n.prev=55,!S){n.next=58;break}throw F;case 58:return n.finish(55);case 59:return n.finish(52);case 60:this.turn++,m.symbolIndex=0,n.next=65;break;case 64:m.symbolIndex=++x;case 65:n.next=260;break;case 67:k=this.grammar.getDerivations(symbol),I=!0,E=!1,w=void 0,n.prev=71,O=k[Symbol.iterator]();case 73:if(I=(T=O.next()).done){n.next=221;break}j=T.value,body=j.getBody(),C=!0,H=!1,A=void 0,n.prev=79,D=body[Symbol.iterator]();case 81:if(C=(P=D.next()).done){n.next=204;break}if(!(R=P.value).isEmpty()){n.next=92;break}if(J=R,this.firstSetHasTheSymbol(this.allFirstSet[x][2],J)){n.next=90;break}return this.allFirstSet[x][2].push(J),h.add(symbol,J),n.next=90,{isTerminal:!1,allFirstSet:this.allFirstSet,symbolIndex:x,symbol:symbol,production:j,productionIndex:this.grammar.getProductions().indexOf(j),dependSymbolIndex:null,newlyIncreasedSymbol:J,turn:this.turn,algorithmStep:4,notice:'\n                <h3>\n                  当前计算\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  border-radius: 4px;\n                  margin: 2px; \n                  padding:1px 3px 3px 10px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                    First( '.concat(symbol.getString(),' )\n                  </span><br><br>\n                  基于产生式\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  border-radius: 4px;\n                  margin: 2px; \n                  padding:1px 3px 3px 10px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                    ').concat(j.getString(),'\n                  </span><br><br>\n                  将\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  margin-right: 6px;\n                  padding:0px 1px 0px 8px;\n                  border-radius: 4px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                    ').concat(J.getString(),'\n                  </span>加入\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  border-radius: 4px;\n                  margin: 2px; \n                  padding:1px 3px 3px 10px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                    First( ').concat(symbol.getString()," )\n                  </span>中\n                </h3>")};case 90:n.next=201;break;case 92:if(B=this.getIndex(R),d()(-100!==B,"符号 ".concat(R.getString()," 不存在")),0!==this.allFirstSet[B][2].length){n.next=100;break}return n.next=97,{isTerminal:!1,allFirstSet:this.allFirstSet,symbolIndex:x,symbol:symbol,production:j,productionIndex:this.grammar.getProductions().indexOf(j),dependSymbolIndex:B,newlyIncreasedSymbol:null,turn:this.turn,algorithmStep:2,notice:'\n                <h3>\n                  当前计算\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  border-radius: 4px;\n                  margin: 2px; \n                  padding:1px 3px 3px 10px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                      First( '.concat(symbol.getString(),' )\n                  </span><br><br>\n                  基于产生式\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  border-radius: 4px;\n                  margin: 2px; \n                  padding:1px 3px 3px 10px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                    ').concat(j.getString(),'\n                  </span><br><br>\n                  需要将\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  border-radius: 4px;\n                  margin: 2px; \n                  padding:1px 3px 3px 10px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                      First( ').concat(this.allFirstSet[B][0].getString(),' )\n                  </span>中的所有符号加入\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  border-radius: 4px;\n                  margin: 2px; \n                  padding:1px 3px 3px 10px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                      First( ').concat(symbol.getString(),' )\n                  </span>中<br><br>\n                  但是当前\n                  <span \n                  style="color: #409EFF;\n                  background-color: rgba(64,158,255,.1);\n                  border-radius: 4px;\n                  margin: 2px; \n                  padding:1px 3px 3px 10px;\n                  border: 1px solid rgba(64,158,255,.2);"\n                  >\n                      First( ').concat(this.allFirstSet[B][0].getString()," ) \n                  </span>为空，等待下一轮计算\n                </h3>")};case 97:return n.abrupt("break",204);case 100:if(!this.firstSetHasEmpty(this.allFirstSet[B][2])){n.next=171;break}if(!(body.indexOf(R)<body.length-1)){n.next=133;break}N=!0,z=!1,G=void 0,n.prev=105,K=this.allFirstSet[B][2][Symbol.iterator]();case 107:if(N=(L=K.next()).done){n.next=117;break}if((M=L.value).isEmpty()||this.firstSetHasTheSymbol(this.allFirstSet[x][2],M)){n.next=114;break}return this.allFirstSet[x][2].push(M),h.add(symbol,M),n.next=114,{isTerminal:!1,allFirstSet:this.allFirstSet,symbolIndex:x,symbol:symbol,production:j,productionIndex:this.grammar.getProductions().indexOf(j),dependSymbolIndex:B,newlyIncreasedSymbol:M,turn:this.turn,algorithmStep:2,notice:'\n                        <h3>\n                          当前计算\n                          <span \n                          style="color: #409EFF;\n                          background-color: rgba(64,158,255,.1);\n                          border-radius: 4px;\n                          margin: 2px; \n                          padding:1px 3px 3px 10px;\n                          border: 1px solid rgba(64,158,255,.2);"\n                          >\n                            First( '.concat(symbol.getString(),' )\n                          </span><br><br>\n                          基于产生式\n                          <span \n                          style="color: #409EFF;\n                          background-color: rgba(64,158,255,.1);\n                          border-radius: 4px;\n                          margin: 2px; \n                          padding:1px 3px 3px 10px;\n                          border: 1px solid rgba(64,158,255,.2);"\n                          >\n                            ').concat(j.getString(),'\n                          </span><br><br>\n                          将\n                          <span \n                          style="color: #409EFF;\n                          background-color: rgba(64,158,255,.1);\n                          border-radius: 4px;\n                          margin: 2px; \n                          padding:1px 3px 3px 10px;\n                          border: 1px solid rgba(64,158,255,.2);"\n                          >\n                            First( ').concat(this.allFirstSet[B][0].getString(),' )\n                          </span>中除\n                          <span \n                          style="color: #409EFF;\n                          background-color: rgba(64,158,255,.1);\n                          margin-right: 6px;\n                          padding:0px 1px 0px 8px;\n                          border-radius: 4px;\n                          border: 1px solid rgba(64,158,255,.2);"\n                          >\n                          ε\n                          </span>\n                          以外的其他符号加入到\n                          <span \n                          style="color: #409EFF;\n                          background-color: rgba(64,158,255,.1);\n                          border-radius: 4px;\n                          margin: 2px; \n                          padding:1px 3px 3px 10px;\n                          border: 1px solid rgba(64,158,255,.2);"\n                          >\n                            First( ').concat(symbol.getString()," )\n                          </span>中\n                        </h3>")};case 114:N=!0,n.next=107;break;case 117:n.next=123;break;case 119:n.prev=119,n.t2=n.catch(105),z=!0,G=n.t2;case 123:n.prev=123,n.prev=124,N||null==K.return||K.return();case 126:if(n.prev=126,!z){n.next=129;break}throw G;case 129:return n.finish(126);case 130:return n.finish(123);case 131:n.next=169;break;case 133:Q=!0,U=!1,V=void 0,n.prev=136,W=this.allFirstSet[B][2][Symbol.iterator]();case 138:if(Q=(X=W.next()).done){n.next=155;break}if(Y=X.value,this.firstSetHasTheSymbol(this.allFirstSet[x][2],Y)){n.next=152;break}if(!Y.isEmpty()){n.next=148;break}return this.allFirstSet[x][2].push(Y),h.add(symbol,Y),n.next=146,{isTerminal:!1,allFirstSet:this.allFirstSet,symbolIndex:x,symbol:symbol,production:j,productionIndex:this.grammar.getProductions().indexOf(j),dependSymbolIndex:B,newlyIncreasedSymbol:Y,turn:this.turn,algorithmStep:3,notice:'\n                          <h3>\n                            当前计算\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            border-radius: 4px;\n                            margin: 2px; \n                            padding:1px 3px 3px 10px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                              First( '.concat(symbol.getString(),' )\n                            </span><br><br>\n                            基于产生式\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            border-radius: 4px;\n                            margin: 2px; \n                            padding:1px 3px 3px 10px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                              ').concat(j.getString(),'\n                            </span><br><br>\n                            将符号\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            margin-right: 6px;\n                            padding:0px 1px 0px 8px;\n                            border-radius: 4px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                            ε\n                            </span>\n                            加入到\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            border-radius: 4px;\n                            margin: 2px; \n                            padding:1px 3px 3px 10px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                              First( ').concat(symbol.getString()," )\n                            </span>中\n                          </h3>")};case 146:n.next=152;break;case 148:return this.allFirstSet[x][2].push(Y),h.add(symbol,Y),n.next=152,{isTerminal:!1,allFirstSet:this.allFirstSet,symbolIndex:x,symbol:symbol,production:j,productionIndex:this.grammar.getProductions().indexOf(j),dependSymbolIndex:B,newlyIncreasedSymbol:Y,turn:this.turn,algorithmStep:2,notice:'\n                          <h3>\n                            当前计算\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            border-radius: 4px;\n                            margin: 2px; \n                            padding:1px 3px 3px 10px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                              First( '.concat(symbol.getString(),' )\n                            </span><br><br>\n                            基于产生式\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            border-radius: 4px;\n                            margin: 2px; \n                            padding:1px 3px 3px 10px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                              ').concat(j.getString(),'\n                            </span><br><br>\n                            需要将\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            border-radius: 4px;\n                            margin: 2px; \n                            padding:1px 3px 3px 10px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                              First( ').concat(this.allFirstSet[B][0].getString(),' )\n                            </span>中除\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            margin-right: 6px;\n                            padding:0px 1px 0px 8px;\n                            border-radius: 4px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                            ε\n                            </span>\n                            以外的其他符号加入到\n                            <span \n                            style="color: #409EFF;\n                            background-color: rgba(64,158,255,.1);\n                            border-radius: 4px;\n                            margin: 2px; \n                            padding:1px 3px 3px 10px;\n                            border: 1px solid rgba(64,158,255,.2);"\n                            >\n                              First( ').concat(symbol.getString()," )\n                            </span>中\n                          </h3>")};case 152:Q=!0,n.next=138;break;case 155:n.next=161;break;case 157:n.prev=157,n.t3=n.catch(136),U=!0,V=n.t3;case 161:n.prev=161,n.prev=162,Q||null==W.return||W.return();case 164:if(n.prev=164,!U){n.next=167;break}throw V;case 167:return n.finish(164);case 168:return n.finish(161);case 169:n.next=201;break;case 171:Z=!0,$=!1,_=void 0,n.prev=174,nn=this.allFirstSet[B][2][Symbol.iterator]();case 176:if(Z=(rn=nn.next()).done){n.next=186;break}if(en=rn.value,this.firstSetHasTheSymbol(this.allFirstSet[x][2],en)){n.next=183;break}return this.allFirstSet[x][2].push(en),h.add(symbol,en),n.next=183,{isTerminal:!1,allFirstSet:this.allFirstSet,symbolIndex:x,symbol:symbol,production:j,productionIndex:this.grammar.getProductions().indexOf(j),dependSymbolIndex:B,newlyIncreasedSymbol:en,turn:this.turn,algorithmStep:2,notice:'\n                      <h3>\n                        当前计算\n                        <span \n                          style="color: #409EFF;\n                          background-color: rgba(64,158,255,.1);\n                          border-radius: 4px;\n                          margin: 2px; \n                          padding:1px 3px 3px 10px;\n                          border: 1px solid rgba(64,158,255,.2);"\n                          >\n                          First( '.concat(symbol.getString(),' )\n                        </span><br><br>\n                        基于产生式\n                        <span \n                          style="color: #409EFF;\n                          background-color: rgba(64,158,255,.1);\n                          border-radius: 4px;\n                          margin: 2px; \n                          padding:1px 3px 3px 10px;\n                          border: 1px solid rgba(64,158,255,.2);"\n                          >\n                          ').concat(j.getString(),'\n                        </span><br><br>\n                        将\n                        <span \n                        style="color: #409EFF;\n                        background-color: rgba(64,158,255,.1);\n                        border-radius: 4px;\n                        margin: 2px; \n                        padding:1px 3px 3px 10px;\n                        border: 1px solid rgba(64,158,255,.2);"\n                        >\n                          First( ').concat(this.allFirstSet[B][0].getString(),' )\n                        </span>中的符号加入到\n                        <span \n                        style="color: #409EFF;\n                        background-color: rgba(64,158,255,.1);\n                        border-radius: 4px;\n                        margin: 2px; \n                        padding:1px 3px 3px 10px;\n                        border: 1px solid rgba(64,158,255,.2);"\n                        >\n                          First( ').concat(symbol.getString()," )\n                        </span>中\n                      </h3>")};case 183:Z=!0,n.next=176;break;case 186:n.next=192;break;case 188:n.prev=188,n.t4=n.catch(174),$=!0,_=n.t4;case 192:n.prev=192,n.prev=193,Z||null==nn.return||nn.return();case 195:if(n.prev=195,!$){n.next=198;break}throw _;case 198:return n.finish(195);case 199:return n.finish(192);case 200:return n.abrupt("break",204);case 201:C=!0,n.next=81;break;case 204:n.next=210;break;case 206:n.prev=206,n.t5=n.catch(79),H=!0,A=n.t5;case 210:n.prev=210,n.prev=211,C||null==D.return||D.return();case 213:if(n.prev=213,!H){n.next=216;break}throw A;case 216:return n.finish(213);case 217:return n.finish(210);case 218:I=!0,n.next=73;break;case 221:n.next=227;break;case 223:n.prev=223,n.t6=n.catch(71),E=!0,w=n.t6;case 227:n.prev=227,n.prev=228,I||null==O.return||O.return();case 230:if(n.prev=230,!E){n.next=233;break}throw w;case 233:return n.finish(230);case 234:return n.finish(227);case 235:if(x!==this.allFirstSet.length-1){n.next=259;break}for(tn=!0,an=!1,sn=void 0,n.prev=239,on=this.allFirstSet[Symbol.iterator]();!(tn=(ln=on.next()).done);tn=!0)(pn=ln.value)[2].length===pn[3]?(pn[1]=!0,pn[3]=pn[2].length):(pn[1]=!1,pn[3]=pn[2].length);n.next=247;break;case 243:n.prev=243,n.t7=n.catch(239),an=!0,sn=n.t7;case 247:n.prev=247,n.prev=248,tn||null==on.return||on.return();case 250:if(n.prev=250,!an){n.next=253;break}throw sn;case 253:return n.finish(250);case 254:return n.finish(247);case 255:this.turn++,m.symbolIndex=0,n.next=260;break;case 259:m.symbolIndex=++x;case 260:return n.abrupt("return",[!1,m]);case 261:case"end":return n.stop()}},n,this,[[4,16,20,28],[21,,23,27],[44,48,52,60],[53,,55,59],[71,223,227,235],[79,206,210,218],[105,119,123,131],[124,,126,130],[136,157,161,169],[162,,164,168],[174,188,192,200],[193,,195,199],[211,,213,217],[228,,230,234],[239,243,247,255],[248,,250,254]])})},{key:"getCurResult",value:function(n){return n.firstSet}},{key:"runEpoch",value:function(n){var r=this.epoch(n),e=null;do{e=r.next()}while(!1===e.done);return e.value}},{key:"run",value:function(){for(var n=[!1,this.getInitContext()];!1===n[0];)n=this.runEpoch(n[1]);return this.getCurResult(n[1])}}]),n}();r.a=h}}]);